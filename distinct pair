import java.util.*;
import java.util.HashMap;
import java.util.Map;

public class DisjointSet {

    private Map<Long, Node> map = new HashMap<>();

    class Node {
        long data;
        Node parent;
        int rank;
    }
    public void makeSet(long data) {
        Node node = new Node();
        node.data = data;
        node.parent = node;
        node.rank = 0;
        map.put(data, node);
    }
    public boolean union(long data1, long data2) {
        Node node1 = map.get(data1);
        Node node2 = map.get(data2);

        Node parent1 = findSet(node1);
        Node parent2 = findSet(node2);
        if (parent1.data == parent2.data) {
            return false;
        }

      
        if (parent1.rank >= parent2.rank) {
            parent1.rank = (parent1.rank == parent2.rank) ? parent1.rank + 1 : parent1.rank;
            parent2.parent = parent1;
        } else {
            parent1.parent = parent2;
        }
        return true;
    }
    public long findSet(long data) {
        return findSet(map.get(data)).data;
    }
    private Node findSet(Node node) {
        Node parent = node.parent;
        if (parent == node) {
            return parent;
        }
        node.parent = findSet(node.parent);
        return node.parent;
    }

    public static void main(String args[])
    {
        DisjointSet ds = new DisjointSet();
        Scanner sc=new Scanner(System.in);
        long product=0;
        int count1=0,k=0;
        long result=0,n=0;
        int a=sc.nextInt();
        int b=sc.nextInt();
        int arr[]=new int[a];
        int arr2[]=new int[a];
        for(long i=0;i<a;i++)
        {
          ds.makeSet(i);
        }
        for(long i=0;i<b;i++)
        {
            long u=sc.nextInt();
            long v=sc.nextInt();
            ds.union(u ,v);
        }
         for(long i=0;i<a;i++)
        {
           int t=(int)ds.findSet(i);
           arr[t]=arr[t]+1;
        }
        for(int i=0;i<a;i++)
        {
             count1++;
            // }
            if(arr[i]>=1)
            {
                arr2[k]=arr[i];
                k++;
            }
        }
       
        long sum=arr2[0];
       
        for(int i=1;i<arr2.length;i++){
        product+=(sum*arr2[i]);
        sum+=arr2[i];
        }
        System.out.println(product+n);
        
       
    }
}

